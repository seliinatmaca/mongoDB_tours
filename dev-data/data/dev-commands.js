// Geli≈ütirme a≈üamasƒ±nda mongodb deki verilerin bozƒ±lmasƒ± sƒ±k√ßa kar≈üƒ±la≈ütƒ±ƒüƒ±mƒ±z bir durum ve bu durumda database deki verileri silip json dosyasƒ±nda ki verileri tekrardan aktarmamƒ±z gerekicek bunu aray√ºzden yapmak uƒüra≈ütuƒ±rcƒ± olucaƒüƒ± i√ßin 2 fonksiyon hazƒ±rlaycaƒüƒ±z.

const fs = require("fs");
const mongoose = require("mongoose");
const Tour = require("../../models/tourModel.js");

//json dosyasƒ±nda verileri al
const tours = JSON.parse(fs.readFileSync(`${__dirname}/tours-simple.json`));

// dotenv k√ºt√ºphanesini √ßevre deƒüi≈ükenlerine eri≈ümek i√ßin kuruyoruz.
require("dotenv").config();

// mongo veritabanƒ±na baƒülan (driver)
mongoose
  .connect(process.env.DATABASE_URL)
  .then(() => console.log(" üòç Veritabanƒ± ile baƒülantƒ± kuruldu."))
  .catch((err) => console.log(" ü§¨ veritabanƒ±na baƒülanƒ±rken hata olu≈ütu", err));

//devdata klas√∂r√ºndeki json dosyalarƒ±ndan verileri alƒ±p mpngodb ye aktar
const importData = async () => {
  try {
    await Tour.create(tours, { validateBeforeSave: false });
    console.log("Json verileri koleksiyona aktarƒ±ldƒ±");
  } catch (error) {
    console.log(error);
  }
  process.exit();
};

//mongodb deki datalarƒ± silecek

const deleteData = async () => {
  try {
    await Tour.deleteMany();
    console.log("B√ºt√ºn veriler temizlendi");
  } catch (error) {
    console.log(error);
  }

  process.exit();
};

console.log(process.argv);

//komutun sonuna eklenen arg√ºmana g√∂re √ßalƒ±≈üacak fonskiyonu belitliyoruz.
if (process.argv.includes("--import")) {
  importData();
} else if (process.argv.includes("--delete")) {
  deleteData();
}
